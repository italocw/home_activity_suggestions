// Mocks generated by Mockito 5.4.4 from annotations
// in home_activity_suggestions/test/presentation/suggestions_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:home_activity_suggestions/core/data/result.dart' as _i7;
import 'package:home_activity_suggestions/features/suggestions/domain/entities/suggestion.dart'
    as _i5;
import 'package:home_activity_suggestions/features/suggestions/domain/entities/suggestion_category.dart'
    as _i2;
import 'package:home_activity_suggestions/features/suggestions/domain/usecases/add_suggestion.dart'
    as _i3;
import 'package:home_activity_suggestions/features/suggestions/domain/usecases/delete_suggestion.dart'
    as _i9;
import 'package:home_activity_suggestions/features/suggestions/domain/usecases/get_suggestion.dart'
    as _i6;
import 'package:home_activity_suggestions/features/suggestions/domain/usecases/get_suggestion_stream.dart'
    as _i10;
import 'package:home_activity_suggestions/features/suggestions/domain/usecases/update_suggestion.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSuggestionCategory_0 extends _i1.SmartFake
    implements _i2.SuggestionCategory {
  _FakeSuggestionCategory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeException_1 extends _i1.SmartFake implements Exception {
  _FakeException_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddSuggestion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddSuggestion extends _i1.Mock implements _i3.AddSuggestion {
  MockAddSuggestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(_i5.Suggestion? suggestion) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [suggestion],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetSuggestion].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSuggestion extends _i1.Mock implements _i6.GetSuggestion {
  MockGetSuggestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.Result<_i5.Suggestion>> call(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i4.Future<_i7.Result<_i5.Suggestion>>.value(
            _i8.dummyValue<_i7.Result<_i5.Suggestion>>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i4.Future<_i7.Result<_i5.Suggestion>>);
}

/// A class which mocks [DeleteSuggestion].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteSuggestion extends _i1.Mock implements _i9.DeleteSuggestion {
  MockDeleteSuggestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(String? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetSuggestionStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSuggestionStream extends _i1.Mock
    implements _i10.GetSuggestionStream {
  MockGetSuggestionStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.Suggestion>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.Suggestion>>.empty(),
      ) as _i4.Stream<List<_i5.Suggestion>>);
}

/// A class which mocks [UpdateSuggestion].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateSuggestion extends _i1.Mock implements _i11.UpdateSuggestion {
  MockUpdateSuggestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(_i5.Suggestion? suggestion) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [suggestion],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Suggestion].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestion extends _i1.Mock implements _i5.Suggestion {
  MockSuggestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  _i2.SuggestionCategory get category => (super.noSuchMethod(
        Invocation.getter(#category),
        returnValue: _FakeSuggestionCategory_0(
          this,
          Invocation.getter(#category),
        ),
      ) as _i2.SuggestionCategory);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  bool get stringify => (super.noSuchMethod(
        Invocation.getter(#stringify),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [Success].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuccess<T> extends _i1.Mock implements _i7.Success<T> {
  MockSuccess() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _i8.dummyValue<T>(
          this,
          Invocation.getter(#value),
        ),
      ) as T);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [Failure].
///
/// See the documentation for Mockito's code generation for more information.
class MockFailure<T> extends _i1.Mock implements _i7.Failure<T> {
  MockFailure() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Exception get exception => (super.noSuchMethod(
        Invocation.getter(#exception),
        returnValue: _FakeException_1(
          this,
          Invocation.getter(#exception),
        ),
      ) as Exception);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}
